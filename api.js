require('dotenv').config();
const express = require('express');
const axios = require('axios');
const redis = require('redis');
const morgan = require('morgan');
const sanitize = require('sanitize-html');
const rateLimit = require('express-rate-limit');
const multer = require('multer');
const pdfParse = require('pdf-parse');
const Tesseract = require('tesseract.js');

const app = express();
const PORT = 4000;
const RESULTS_PER_PAGE = 5;
const upload = multer();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// üîπ Configura√ß√£o do Redis
const client = redis.createClient();
client.connect().catch((err) => console.error("‚ùå [API] Erro ao conectar ao Redis:", err));

// üîπ Middleware para logs organizados
app.use(morgan('tiny'));

// üîπ Middleware de seguran√ßa para limitar requisi√ß√µes
const limiter = rateLimit({
    windowMs: 60 * 1000,
    max: 30,
    message: "‚ö†Ô∏è [API] Limite de requisi√ß√µes excedido. Tente novamente mais tarde."
});
app.use(limiter);

// üîπ Configura√ß√£o de APIs externas
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const GOOGLE_CX = process.env.GOOGLE_CX;
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY;

if (!GOOGLE_API_KEY || !GOOGLE_CX || !MISTRAL_API_KEY) {
    console.error("‚ùå [API] ERRO: Faltando vari√°veis de ambiente (GOOGLE_API_KEY, GOOGLE_CX ou MISTRAL_API_KEY). ");
    process.exit(1);
}

const CUSTOM_SEARCH_URL = `https://www.googleapis.com/customsearch/v1?key=${GOOGLE_API_KEY}&cx=${GOOGLE_CX}`;
const MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions";

// üìå **Fun√ß√£o de Log**
function logAction(type, message) {
    console.log(`üìå [${type.toUpperCase()}] ${message}`);
}

// üìå **Lista de palavras-chave jur√≠dicas**
const legalKeywords = [
    "lei", "c√≥digo", "regulamento", "norma", "direito", "portaria",
    "decreto", "constitui√ß√£o", "jur√≠dico", "justi√ßa", "processo", "legisla√ß√£o",
    "estatuto", "resolu√ß√£o", "tribunal", "decis√£o", "juiz", "promulga√ß√£o", "sancionada"
];

// üìå **Sanitiza√ß√£o e Valida√ß√£o de Input**
function sanitizeQuery(query) {
    return sanitize(query.replace(/[^a-zA-Z0-9√Ä-√ø\s]/g, '').trim());
}

// üìå **Garante que "Lei" est√° no in√≠cio da pesquisa**
function ensureLawPrefix(query) {
    query = sanitizeQuery(query);
    const words = query.toLowerCase().split(" ");
    if (!legalKeywords.includes(words[0])) {
        return `Lei ${query}`;
    }
    return query;
}

// üìå **Busca no Google Custom Search com pagina√ß√£o**
async function searchGoogle(query, page = 1) {
    const startIndex = (page - 1) * RESULTS_PER_PAGE + 1;
    const googleApiUrl = `${CUSTOM_SEARCH_URL}&q=${encodeURIComponent(query)}&num=${RESULTS_PER_PAGE}&gl=br&start=${startIndex}`;

    try {
        logAction("API", `üîç Buscando no Google: ${query} (P√°gina ${page})`);
        const response = await axios.get(googleApiUrl);

        if (!response.data.items) return [];

        // üîπ Filtra poss√≠veis duplica√ß√µes nos resultados
        const uniqueResults = response.data.items.filter((item, index, self) =>
            index === self.findIndex((t) => t.link === item.link)
        );

        return uniqueResults;
    } catch (error) {
        logAction("ERRO", "Erro ao buscar no Google: " + error.message);
        return [];
    }
}

// üìú **Endpoint para buscar leis com suporte √† pagina√ß√£o**
app.get(['/search', '/buscar'], async (req, res) => {
    let query = req.query.q;
    let page = parseInt(req.query.page) || 1;

    if (!query) {
        return res.status(400).json({ error: 'O par√¢metro "q" √© obrigat√≥rio' });
    }

    query = ensureLawPrefix(query);
    logAction("API", `Pesquisa recebida: ${query} - P√°gina ${page}`);

    const cacheKey = `search-law:${query}:page:${page}`;
    const cachedData = await client.get(cacheKey);

    if (cachedData) {
        logAction("CACHE", `‚ôªÔ∏è Recuperando do cache para "${query}" (P√°gina ${page})`);
        return res.json(JSON.parse(cachedData));
    }

    let results = await searchGoogle(query, page);

    if (!results || results.length === 0) {
        return res.json({
            message: `‚ö†Ô∏è Nenhuma lei encontrada para "${query}".\n\nüí° *Dica:* Tente reformular sua pesquisa come√ßando com "Lei".`
        });
    }

    const responsePayload = {
        message: "üìú Leis encontradas:",
        results: results.slice(0, RESULTS_PER_PAGE),
        nextPage: results.length === RESULTS_PER_PAGE ? `/buscar?q=${encodeURIComponent(query)}&page=${page + 1}` : null
    };

    await client.setEx(cacheKey, 1800, JSON.stringify(responsePayload)); // Cache por 30 minutos

    return res.json(responsePayload);
});

app.post('/buscar', async (req, res) => {
    let query = req.body.q;
    let page = parseInt(req.body.page) || 1;

    if (!query) {
        return res.status(400).json({ error: 'O par√¢metro "q" √© obrigat√≥rio no corpo da requisi√ß√£o' });
    }

    query = ensureLawPrefix(query);
    logAction("API", `Pesquisa recebida via POST: ${query} - P√°gina ${page}`);

    const cacheKey = `search-law:${query}:page:${page}`;
    const cachedData = await client.get(cacheKey);

    if (cachedData) {
        logAction("CACHE", `‚ôªÔ∏è Recuperando do cache para "${query}" (P√°gina ${page})`);
        return res.json(JSON.parse(cachedData));
    }

    let results = await searchGoogle(query, page);

    if (!results || results.length === 0) {
        return res.json({
            message: `‚ö†Ô∏è Nenhuma lei encontrada para "${query}".\n\nüí° *Dica:* Tente reformular sua pesquisa come√ßando com "Lei".`
        });
    }

    const responsePayload = {
        message: "üìú Leis encontradas:",
        results: results.slice(0, RESULTS_PER_PAGE),
        nextPage: results.length === RESULTS_PER_PAGE ? `/buscar?q=${encodeURIComponent(query)}&page=${page + 1}` : null
    };

    await client.setEx(cacheKey, 1800, JSON.stringify(responsePayload)); // Cache por 30 minutos

    return res.json(responsePayload);
});

// üöÄ **Inicia a API**
app.listen(PORT, () => {
    logAction("API", `API de Pesquisa de Leis rodando na porta ${PORT}`);
    logAction("API", `Alias dispon√≠veis: "/search", "/buscar" e "/analisar-pdf"`);
});
